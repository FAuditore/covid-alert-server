package persistence

import (
	"database/sql"
	"errors"
	"fmt"
	"time"
)

// Event the event that we are to log
type Event struct {
	identifier EventType
	deviceType DeviceType
	date       time.Time
	count      int
}

// SaveEvent log an Event in the database
func (c *conn) SaveEvent(event Event) error {

	if err := saveEvent(c.db, event); err != nil {
		return err
	}
	return nil
}

// DeviceType the type of the device the event was generated by
type DeviceType string

// EventType the type of the event that happened
type EventType string

const (
	Android DeviceType = "Android"
	iOS     DeviceType = "iOS"
	Server  DeviceType = "Server"
)

const (
	KeyClaimed   EventType = "KeyClaimed"
	KeyGenerated EventType = "KeyGenerated"
)

// IsValid validates the Device Type against a list of allowed strings
func (dt DeviceType) IsValid() error {
	switch dt {
		case Android, iOS, Server:{
			return nil
		}
	}
	return errors.New(fmt.Sprintf("Invalid Device Type: (%s)\n", dt))
}

// IsValid validates the Event Type against a list of allowed strings
func (et EventType) IsValid() error {
	switch et {
	case KeyGenerated, KeyClaimed:
		return nil
	}
	return errors.New(fmt.Sprintf("Invalid EventType: (%s)\n", et))
}


func saveEvent(db *sql.DB, e Event) error {
	if err := e.deviceType.IsValid(); err != nil {
		return err
	}

	if err := e.identifier.IsValid(); err != nil {
		return err
	}

	tx, err := db.Begin()
	if err != nil {
		return err
	}

	if _, err := tx.Exec(`
		INSERT INTO events
		(identifier, device_type, date, count)
		VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE count = count + ?`,
		e.identifier, e.deviceType, e.date.Format("2006-01-02"), e.count, e.count); err != nil {

		if err := tx.Rollback(); err != nil {
			return err
		}
		return err
	}

	if err := tx.Commit(); err != nil {
		return err
	}

	return nil
}
